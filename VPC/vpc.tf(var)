#######################################
#             Variables               #
#######################################

variable "vpc_cidr_block" {
  default = "10.0.0.0/16"
}

variable "public_subnets" {
  default = [
    {
      cidr_block        = "10.0.0.0/24"
      availability_zone = "ap-northeast-2a"
      name              = "test_public_subnet_a"
    },
    {
      cidr_block        = "10.0.1.0/24"
      availability_zone = "ap-northeast-2b"
      name              = "test_public_subnet_b"
    }
  ]
}

variable "private_subnets" {
  default = [
    {
      cidr_block        = "10.0.2.0/24"
      availability_zone = "ap-northeast-2a"
      name              = "test_private_subnet_a"
    },
    {
      cidr_block        = "10.0.3.0/24"
      availability_zone = "ap-northeast-2b"
      name              = "test_private_subnet_b"
    }
  ]
}

variable "igw_tags" {
  default = {
    Name = "test_IGW"
  }
}

variable "nat_gateway_names" {
  default = ["MyNATGatewayA", "MyNATGatewayB"]
}

variable "public_rt_tag" {
  default = {
    Name = "test_public-rt"
  }
}

variable "private_rt_tags" {
  default = [
    {
      Name = "test_private_rt-a"
    },
    {
      Name = "test_private_rt-b"
    }
  ]
}


#######################################
#               VPC                   #
#######################################

resource "aws_vpc" "vpc" {
    cidr_block = var.vpc_cidr_block

    tags = {
        Name = "VPC"
    }
}

#######################################
#               Subnets               #
#######################################

resource "aws_subnet" "public_subnets" {
  count             = length(var.public_subnets)
  vpc_id            = aws_vpc.vpc.id
  cidr_block        = var.public_subnets[count.index].cidr_block
  availability_zone = var.public_subnets[count.index].availability_zone
  map_public_ip_on_launch = true

  tags = {
    Name = var.public_subnets[count.index].name
  }
}

resource "aws_subnet" "private_subnets" {
  count             = length(var.private_subnets)
  vpc_id            = aws_vpc.vpc.id
  cidr_block        = var.private_subnets[count.index].cidr_block
  availability_zone = var.private_subnets[count.index].availability_zone

  tags = {
    Name = var.private_subnets[count.index].name
  }
}

#######################################
#            Internet Gateway         #
#######################################

resource "aws_internet_gateway" "IGW" {
    vpc_id = aws_vpc.vpc.id

    tags = var.igw_tags
}

#######################################
#          NAT Gateways               #
#######################################

resource "aws_eip" "nat_eips" {
  count = 2
  vpc = true

  lifecycle {
    create_before_destroy = true 
  }
}

resource "aws_nat_gateway" "nat_gateways" {
  count         = 2
  allocation_id = aws_eip.nat_eips[count.index].id 
  subnet_id     = aws_subnet.public_subnets[count.index].id 

  tags = {
    Name = var.nat_gateway_names[count.index]
  }
}

#######################################
#           Route Tables              #
#######################################

resource "aws_route_table" "public_rt" {
    vpc_id = aws_vpc.vpc.id 

    tags = var.public_rt_tag
}

resource "aws_route_table_association" "public_route_table_associations" {
  count         = length(var.public_subnets)
  subnet_id     = aws_subnet.public_subnets[count.index].id
  route_table_id = aws_route_table.public_rt.id 
}

resource "aws_route_table" "private_rts" {
  count = length(var.private_subnets)

  vpc_id = aws_vpc.vpc.id
  tags = var.private_rt_tags[count.index]
}


resource "aws_route_table_association" "private_route_table_associations" {
  count           = length(var.private_subnets)
  subnet_id       = aws_subnet.private_subnets[count.index].id
  route_table_id  = aws_route_table.private_rts[count.index].id
}

#######################################
#            Routes                    #
#######################################

resource "aws_route" "igw_connect" {
  route_table_id         = aws_route_table.public_rt.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.IGW.id
}

resource "aws_route" "nat_connect" {
  count                  = length(var.private_subnets)
  route_table_id         = aws_route_table.private_rts[count.index].id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_nat_gateway.nat_gateways[count.index].id
}
